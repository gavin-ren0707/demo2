// Generated by https://quicktype.io

namespace demo2.Models
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class All
    {
        [JsonProperty("contentType")]
        public string ContentType { get; set; }

        [JsonProperty("isImage")]
        public bool IsImage { get; set; }

        [JsonProperty("data")]
        public Data Data { get; set; }

        [JsonProperty("id")]
        public Guid Id { get; set; }

        [JsonProperty("success")]
        public bool Success { get; set; }
    }

    public partial class Data
    {
        [JsonProperty("XML_Head")]
        public XmlHead XmlHead { get; set; }
    }

    public partial class XmlHead
    {
        [JsonProperty("Listname")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Listname { get; set; }

        [JsonProperty("Language")]
        public string Language { get; set; }

        [JsonProperty("Orgname")]
        public Orgname Orgname { get; set; }

        [JsonProperty("Updatetime")]
        public string Updatetime { get; set; }

        [JsonProperty("Infos")]
        public Infos Infos { get; set; }
    }

    public partial class Infos
    {
        [JsonProperty("Info")]
        public Info[] Info { get; set; }
    }

    public partial class Info
    {
        [JsonProperty("Id")]
        public string Id { get; set; }

        [JsonProperty("Status")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Status { get; set; }

        [JsonProperty("Name")]
        public string Name { get; set; }

        [JsonProperty("Zone")]
        public string Zone { get; set; }

        [JsonProperty("Toldescribe")]
        public string Toldescribe { get; set; }

        [JsonProperty("Description")]
        public string Description { get; set; }

        [JsonProperty("Tel")]
        public string Tel { get; set; }

        [JsonProperty("Add")]
        public string Add { get; set; }

        [JsonProperty("Zipcode")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Zipcode { get; set; }

        [JsonProperty("Travellinginfo")]
        public string Travellinginfo { get; set; }

        [JsonProperty("Opentime")]
        public string Opentime { get; set; }

        [JsonProperty("Map")]
        public string Map { get; set; }

        [JsonProperty("Gov")]
        public Orgname Gov { get; set; }

        [JsonProperty("Px")]
        public string Px { get; set; }

        [JsonProperty("Py")]
        public string Py { get; set; }

        [JsonProperty("Orgclass")]
        public string Orgclass { get; set; }

        [JsonProperty("Level")]
        public string Level { get; set; }

        [JsonProperty("Website")]
        public string Website { get; set; }

        [JsonProperty("Parkinginfo")]
        public string Parkinginfo { get; set; }

        [JsonProperty("Parkinginfo_px")]
        public string ParkinginfoPx { get; set; }

        [JsonProperty("Parkinginfo_py")]
        public string ParkinginfoPy { get; set; }

        [JsonProperty("Ticketinfo")]
        public string Ticketinfo { get; set; }

        [JsonProperty("Remarks")]
        public string Remarks { get; set; }

        [JsonProperty("Keyword")]
        public string Keyword { get; set; }

        [JsonProperty("Changetime")]
        public string Changetime { get; set; }

        [JsonProperty("Class1")]
        public string Class1 { get; set; }

        [JsonProperty("Class2")]
        public string Class2 { get; set; }

        [JsonProperty("Class3")]
        public string Class3 { get; set; }

        [JsonProperty("Picture1")]
        public Uri Picture1 { get; set; }

        [JsonProperty("Picdescribe1")]
        public string Picdescribe1 { get; set; }

        [JsonProperty("Picture2")]
        public string Picture2 { get; set; }

        [JsonProperty("Picdescribe2")]
        public string Picdescribe2 { get; set; }

        [JsonProperty("Picture3")]
        public string Picture3 { get; set; }

        [JsonProperty("Picdescribe3")]
        public string Picdescribe3 { get; set; }
    }

    public enum Orgname { The397000000A };

    public partial class All
    {
        public static All FromJson(string json) => JsonConvert.DeserializeObject<All>(json, demo2.Models.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this All self) => JsonConvert.SerializeObject(self, demo2.Models.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                OrgnameConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class OrgnameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Orgname) || t == typeof(Orgname?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "397000000A")
            {
                return Orgname.The397000000A;
            }
            throw new Exception("Cannot unmarshal type Orgname");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Orgname)untypedValue;
            if (value == Orgname.The397000000A)
            {
                serializer.Serialize(writer, "397000000A");
                return;
            }
            throw new Exception("Cannot marshal type Orgname");
        }

        public static readonly OrgnameConverter Singleton = new OrgnameConverter();
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
